name: Build and Package

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  PROJECT_NAME: 'StainSelector'

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for tags

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build application
      run: dotnet build --configuration Release --no-restore

    - name: Publish application
      run: dotnet publish --configuration Release --no-build --output ./publish --self-contained false

    - name: Create portable package
      run: |
        # Create dist directory
        if (-not (Test-Path "dist")) {
          New-Item -ItemType Directory -Path "dist"
        }

        # Get version from project file
        $version = (Select-Xml -Path "StainSelector.csproj" -XPath "//PropertyGroup/Version").Node.InnerText
        if (-not $version) {
          $version = "1.0.0"
        }

        # Create portable package name
        $packageName = "$env:PROJECT_NAME-$version-portable"
        $packagePath = "dist/$packageName"

        # Create package directory
        if (Test-Path $packagePath) {
          Remove-Item -Path $packagePath -Recurse -Force
        }
        New-Item -ItemType Directory -Path $packagePath

        # Copy published files
        Copy-Item -Path "publish/*" -Destination $packagePath -Recurse

        # Copy additional required files
        if (Test-Path "mdbtools") {
          Copy-Item -Path "mdbtools" -Destination $packagePath -Recurse
        }
        if (Test-Path "WoodStain") {
          Copy-Item -Path "WoodStain" -Destination $packagePath -Recurse
        }
        if (Test-Path "exported_csv") {
          Copy-Item -Path "exported_csv" -Destination $packagePath -Recurse
        }
        if (Test-Path "update.xml") {
          Copy-Item -Path "update.xml" -Destination $packagePath
        }

        # Create README for portable package
        $readmeContent = @"
# $env:PROJECT_NAME Portable Package

Version: $version
Build Date: $(Get-Date -Format "yyyy-MM-dd HH:mm:ss")

## Installation
1. Extract this ZIP file to your desired location
2. Run $env:PROJECT_NAME.exe

## Requirements
- Windows 10/11
- .NET 9.0 Runtime (if not self-contained)

## Files Included
- Main application executable
- Required dependencies
- MDB tools for database operations
- Wood stain data and formulas
- Update configuration

## Support
For issues and updates, visit the project repository.
"@
        $readmeContent | Out-File -FilePath "$packagePath/README.txt" -Encoding UTF8

        # Create ZIP package
        Compress-Archive -Path "$packagePath/*" -DestinationPath "dist/$packageName.zip" -Force

        # Clean up temporary directory
        Remove-Item -Path $packagePath -Recurse -Force

        # Output package info
        Write-Host "Created package: dist/$packageName.zip"
        $packageSize = (Get-Item "dist/$packageName.zip").Length
        Write-Host "Package size: $([math]::Round($packageSize / 1MB, 2)) MB"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: portable-package
        path: dist/*.zip
        retention-days: 30

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.zip
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update version info
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        # Extract version from tag
        $tag = $env:GITHUB_REF -replace 'refs/tags/', ''
        $version = $tag -replace '^v', ''

        # Update update.xml with new version and download URL
        $updateXml = @"
<?xml version="1.0" encoding="utf-8"?>
<update>
  <version>$version</version>
  <downloadUrl>https://github.com/${{ github.repository }}/releases/download/$tag/$env:PROJECT_NAME-$version-portable.zip</downloadUrl>
  <releaseNotes>https://github.com/${{ github.repository }}/releases/tag/$tag</releaseNotes>
  <checksum></checksum>
  <size></size>
  <date>$(Get-Date -Format "yyyy-MM-dd")</date>
</update>
"@
        $updateXml | Out-File -FilePath "update.xml" -Encoding UTF8

        # Commit and push the updated update.xml
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add update.xml
        git commit -m "Update version to $version" || exit 0
        git push || exit 0
